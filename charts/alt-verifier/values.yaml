# -- (int) nodeCount count of producers, not like replicaCounts, it's one producer one statefulset
nodeCount: 0

# Image of https://github.com/alt-research/alt-verifier
image:
  # -- Image repository
  repository: public.ecr.aws/altlayer/alt-verifier
  # -- Specify a imagePullPolicy
  # Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  # ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  pullPolicy: IfNotPresent
  # -- Image tag. Overrides the image tag whose default is the chart appVersion. (default to "master" before first release)
  # If mode is validator, default tag will be appVersion-tracing
  tag: ""

  # -- Specify docker-registry secret names as an array
  # Optionally specify an array of imagePullSecrets.
  # Secrets must be manually created in the namespace.
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  # Example:
  # pullSecrets:
  #   - myRegistryKeySecretNameÂ·
  #
  pullSecrets: []

# -- statefulset strategy type
# @skip updateStrategy.rollingUpdate
# ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
#
updateStrategy:
  # StrategyType
  # Can be set to RollingUpdate or OnDelete
  #
  type: RollingUpdate
  rollingUpdate: {}

# -- podManagementPolicy to manage scaling operation of %%MAIN_CONTAINER_NAME%% pods
# ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
#
podManagementPolicy: ""

# Specifies whether a ServiceAccount should be created
serviceAccount:
  # -- Enable the creation of a ServiceAccount
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- DNS config of Pod
dnsConfig:
  {}
  # options:
  # - name: ndots
  #   value: "1"

# -- Annotations of producer Pod
podAnnotations: {}

# Pod level Security Context
podSecurityContext:
  # fsGroup: 2000
  # fsGroupChangePolicy: OnRootMismatch
  # TODO: fix permission as non-root
  # @skip podSecurityContext.runAsUser
  runAsUser: 0

# -- Security Context of producer container
# Example:
#
# securityContext:
#   capabilities:
#     drop:
#     - ALL
#   readOnlyRootFilesystem: true
#   runAsNonRoot: true
#   runAsUser: 1000
securityContext: {}

# Settings of the service of all producers
service:
  # -- type of service
  type: ClusterIP
  # -- RPC port of service
  rpc: 9933
  # -- Websocket port of service
  ws: 9944
  # -- P2P port of service
  p2p: 30333
  # -- Prometheus port of service
  prometheus: 9615

# Ingress for alt-verifier services (JSONRPC over HTTP and Webcoket)
ingress:
  # -- Enable ingress
  enabled: false
  # -- ingressClassName of ingress
  className: ""
  # -- annotations of ingress
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # -- hosts of ingress
  # @extra ingress.hosts[*].paths[*].wsPath [string] websocket path
  # Example:
  # hosts:
  # - host: chart-example.local
  #   paths:
  #   - path: /
  #     wsPath: /ws
  #     pathType: ImplementationSpecific
  hosts: []

  # -- TLS setting of ingress
  # Example:
  # tls:
  # - secretName: chart-example-tls
  #   hosts:
  #   - chart-example.local
  tls: []

# Websocket Ingress for alt-verifier websocket services (JSONRPC over Webcoket)
wsIngress:
  # -- Enable ingress
  enabled: false
  # -- ingressClassName of ingress
  className: ""
  # -- annotations of ingress
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # -- hosts of ingress
  # Example:
  # hosts:
  # - host: chart-example.local
  #   paths:
  #   - path: /
  #     pathType: ImplementationSpecific
  hosts: []

  # -- TLS setting of ingress
  # Example:
  # tls:
  # - secretName: chart-example-tls
  #   hosts:
  #   - chart-example.local
  tls: []

# -- Resource seetings of producer container
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi
resources: {}
# -- nodeSelector of pod
nodeSelector: {}
# -- tolerations of pod
tolerations: []
# -- affinity of pod
affinity: {}

# Persistent Volume settings
persistence:
  # -- setup volumeClaimTemplate for chaindata persistent volume for producer statefulsets
  enabled: true
  # -- If set, use existing claim instead of creating a new one
  existingClaim: ""
  # -- Size of volume.
  # **NOTICE**: gp3 volume can be live resized when more space needed, no need to provision a large volume at start
  size: 10Gi
  # -- storageClassName of PVC
  storageClassName: ""
  # -- accessModes of PVC
  accessModes:
    - ReadWriteOnce
  # -- annotations of PVC
  annotations: {}
  # key: "value"
  # -- Dir of volume to store chain data
  chainBaseDir: ""
  # -- EmptyDir settings
  # Will be used when `persistence.enabled=false`
  # Ref: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
  emptyDir:
    {}
    # medium: ''
    # sizeLimit: ''

#################
# @section Node Type and Naming
#################

# -- String to be used in labels
nameOverride: ""
# -- String to be used as the base of most resource names
fullnameOverride: ""
# -- String to be used in many resource names
projectName: ""

#################
# @section Node Configurations
#################

# Provides the Mnemonic and NodeKeys
secret:
  # -- create secret instead of using exsisting one
  create: true
  # -- if `create==false` this is the extra secret's name
  name: ""
  # -- creaing a new secret with this mnemonic
  mnemonic: ""
  # -- ecdsa private key that will be inserted into the node's keystore
  privateKeys: []
  # -- creaing a new secret with thiese keys
  nodeKeys: []
  # @skip secret.keyInsertScript
  keyInsertScript: |
    rm /data/*/*/keystore/*
    /usr/local/bin/alt-verifier key insert -d /data --chain=$CHAIN --suri="$PRIVATE_KEY" --key-type acco --scheme ecdsa;
    ls /data/*/*/keystore

# Provides the chainspec.json. The download url will be storageUrl/fileName
chainspec:
  # -- url of the chainspec's dir of storage
  storageUrl: ""
  # -- built-in chainspec name or filename of chainspec to download
  name: ""

# Exposed container ports
ports:
  # -- P2P port of verifier
  p2p: 30334
  # -- Prometheus port of verifier
  prometheus: 9615

# -- Liveness probe
livenessProbe:
  httpGet:
    path: /metrics
    port: prometheus
  initialDelaySeconds: 0
  timeoutSeconds: 1
  periodSeconds: 10
  successThreshold: 1
  failureThreshold: 3

# Readiness probe
readinessProbe:
  httpGet:
    path: /metrics
    port: prometheus
  initialDelaySeconds: 0
  timeoutSeconds: 1
  periodSeconds: 10
  successThreshold: 1
  failureThreshold: 3

hostPorts:
  # -- P2P port
  p2p:
  # -- Prometheus port of producer
  prometheus:

env: {}

# -- script that run before running verifier
preRunScript: ""

args:
  # -- Sets a custom logging filter. Syntax is <target>=<level>, e.g. -lsync=debug
  log: info
  # -- The app id of the layer 2, default is alt_producer 's 0
  appId: 0
  # -- The altbeacon WebSockets RPC URL
  altbeaconUrl:

# <PRODUCER_ARGS>... of verifier
producerArgs: []

serviceMonitor:
  # -- create prometheus-stack's serviceMonitor for producer
  enabled: false

# -- eth 1 rollup arguments
rollup:
  # -- enable rollup mode
  enabled: false
  # -- the subcommand of alt-verifier to do rollup and challenge etc.
  subCommand: rollup
  # -- url to download alt-instruction-runtime.wasm, it will be set as --instruction-wasm-path=/data/inst.wasm after downlaod
  altInstructionUrl: ""
