{{- $_ := ""  }}
{{- if .Values.network }}
{{- $vals := get .Values.networks .Values.network }}
{{- if $vals }}
  {{- $_ = mustMergeOverwrite $.Values $vals }}
{{- end }}
{{- end }}

{{- $fullname := include "alt-verifier.fullname" . }}
{{- $secretName := include "alt-verifier.secretName" . }}
{{- $subCommand := $.Values.subCommand }}
# command and args
{{- $fixedArgs := dict }}
{{- $fixedProducerArgs := dict }}

{{- $fixedArgs = set $fixedArgs "basePath" "/data" }}
{{- $fixedArgs = set $fixedArgs "verifierName" $fullname }}
{{- $fixedArgs = set $fixedArgs "chain" "/data/chainspec.json" }}
{{- if .Values.instructionWasmUrl }}
{{- end }}

{{- $fixedProducerArgs = set $fixedProducerArgs "bootnodes" .Values.bootnodes }}

{{/* if is challenge mode */}}
{{- if has (lower .Values.mode) (list "challenger" "testchallenger")}}
  {{- $fixedArgs = set $fixedArgs "instructionWasmPath" "/data/instruction.wasm" }}
  {{- $subCommand = .Values.challenger.subCommand }}
  {{- $fixedArgs = mustMergeOverwrite $fixedArgs $.Values.challenger.args }}
  {{- $fixedProducerArgs = mustMergeOverwrite $fixedProducerArgs $.Values.challenger.producerArgs }}
  {{- $fixedArgs = set $fixedArgs "verifierName" (printf "%s-challenger" .Release.Name ) }}
  {{- $fixedArgs = set $fixedArgs "layer1Url" .Values.l1.rpcUrls }}
  {{- $fixedArgs = set $fixedArgs "producerUrl" .Values.l2.rpcUrls }}
{{/* if is EthRollup, Tower|OnlyChallenger mode */}}
{{- else if has (lower .Values.mode) (list "ethrollup" "tower" "onlychallenger")}}
  {{- $fixedArgs = set $fixedArgs "instructionWasmPath" "/data/instruction.wasm" }}
  {{- $subCommand = .Values.rollup.subCommand }}
  {{- $fixedArgs = mustMergeOverwrite $fixedArgs $.Values.rollup.args }}
  {{- $fixedProducerArgs = mustMergeOverwrite $fixedProducerArgs $.Values.rollup.producerArgs }}
  {{- $fixedArgs = set $fixedArgs "layer1Url" .Values.l1.rpcUrls }}
  {{- $fixedArgs = set $fixedArgs "producerUrl" .Values.l2.rpcUrls }}
  {{- $fixedArgs = set $fixedArgs "verifierName" (printf "%s-ethrollup" .Release.Name ) }}
  {{- if has (lower .Values.mode) (list "tower" "onlychallenger")}}
    {{- $fixedArgs = set $fixedArgs "verifierName" (printf "%s-tower" .Release.Name ) }}
    {{- $fixedArgs = set $fixedArgs "onlyChallnger" "true" }}
  {{- end }}
{{- end }}


{{- $args := $fixedArgs }}
{{- if $.Values.args }}
{{- $args = mustMergeOverwrite $fixedArgs $.Values.args }}
{{- end }}
{{- $producerArgs := $fixedProducerArgs }}
{{- if $.Values.producerArgs }}
{{- $producerArgs = mustMergeOverwrite $fixedProducerArgs $.Values.producerArgs }}
{{- end }}

{{/* validation */}}
  {{- $_ = required "chainspec is required" .Values.chainspec }}
  {{- $_ = required "bootnodes are required" .Values.bootnodes }}
{{/* is challenge mode */}}
{{- if has (lower .Values.mode) (list "challenger" "testchallenger")}}
  {{- $_ = required "instructionWasm is required" .Values.instructionWasm }}
  {{- $_ = required "l1.chainId is required" .Values.l1.chainId }}
  {{- $_ = required "l1.rpcUrls is required" .Values.l1.rpcUrls }}
  {{- $_ = required "l1.contractAddress is required" .Values.l1.contractAddress }}
  {{- $_ = required "l2.rpcUrls is required" .Values.l2.rpcUrls }}
  {{- $_ = required "l2.contractAddress is required" .Values.l2.contractAddress }}
{{/* EthRollup, Tower|OnlyChallenger mode */}}
{{- else if has (lower .Values.mode) (list "ethrollup" "tower" "onlychallenger")}}
  {{- $_ = required "instructionWasm is required" .Values.instructionWasm }}
  {{- $_ = required "l1.chainId is required" .Values.l1.chainId }}
  {{- $_ = required "l1.rpcUrls is required" .Values.l1.rpcUrls }}
  {{- $_ = required "l1.contractAddress is required" .Values.l1.contractAddress }}
  {{- $_ = required "l2.rpcUrls is required" .Values.l2.rpcUrls }}
  {{- $_ = required "l2.contractAddress is required" .Values.l2.contractAddress }}
{{/* Beacon Rollup mode */}}
{{- else if eq (lower .Values.mode) "beaconrollup" }}
  {{ fail "BeaconRollup mode not supported yet" }}
{{- else }}
  {{ fail "Unknown mode, avaliable options are EthRollup, Tower|OnlyChallenger, BeaconRollup, Challenger|TestChallenger" }}
{{- end }}

{{- $preRunScript := trim $.Values.preRunScript }}
{{- if and $preRunScript (not (hasSuffix ";" $preRunScript)) }}
{{- $preRunScript = printf "%s;" $preRunScript }}
{{- end }}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $fullname }}
  labels:
    {{- include "alt-verifier.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "alt-verifier.selectorLabels" . | nindent 6 }}
  serviceName: {{ $fullname }}-headless
  {{- if $.Values.updateStrategy }}
  updateStrategy: {{- toYaml $.Values.updateStrategy | nindent 4 }}
  {{- end }}
  {{- if $.Values.podManagementPolicy }}
  podManagementPolicy: {{ $.Values.podManagementPolicy | quote }}
  {{- end }}
  template:
    metadata:
      annotations:
        checksum/config-scripts: {{ include (print $.Template.BasePath "/configmap-scripts.yaml") . | sha256sum }}
      {{- with $.Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "alt-verifier.selectorLabels" . | nindent 8 }}
    spec:
      initContainers:
      {{- if or $.Values.chainspec $.Values.instructionWasm }}
      - name: chainspec
        image: {{ include "alt-verifier.image" . }}
        imagePullPolicy: {{ $.Values.image.pullPolicy }}
        workingDir: /data
        volumeMounts:
        - name: persistence
          mountPath: /data
        command:
        - /bin/bash
        - -c
        - |
          {{- with $.Values.chainspec }}
          curl -sJL {{ $.Values.chainspec }} -o /data/chainspec.json;
          ls -l /data/chainspec.json;
          {{- end }}
          {{- with $.Values.instructionWasm }}
          curl -sJL {{ $.Values.instructionWasm }} -o /data/instruction.wasm;
          ls -l /data/instruction.wasm;
          {{- end }}
      {{- end }}
      {{- if $.Values.secret.privateKey }}
      - name: insert-keys
        image: {{ include "alt-verifier.image" . }}
        imagePullPolicy: {{ $.Values.image.pullPolicy }}
        workingDir: /data
        volumeMounts:
        - name: persistence
          mountPath: /data
          subPath: {{ $.Values.persistence.chainBaseDir }}
        env:
        - name: PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              name: {{ $secretName }}
              key: privateKey
        - name: CHAIN
          value: /data/chainspec.json
        command:
        - /bin/bash
        - -c
        - |
          {{- tpl $.Values.secret.keyInsertScript . | nindent 10 }}
      {{- end }}
      containers:
      - name: node
        securityContext: {{- toYaml $.Values.securityContext | nindent 10 }}
        image: {{ include "alt-verifier.image" . }}
        imagePullPolicy: {{ $.Values.image.pullPolicy }}
        workingDir: /data
        ports:
        - containerPort: {{ $.Values.ports.p2p }}
          {{- with $.Values.hostPorts.p2p }}
          hostPort: {{ . }}
          {{- end }}
          name: p2p
          protocol: TCP
        - containerPort: {{ $.Values.ports.prometheus }}
          {{- with $.Values.hostPorts.prometheus }}
          hostPort: {{ . }}
          {{- end }}
          name: prometheus
        livenessProbe:
          {{- toYaml $.Values.livenessProbe | nindent 10 }}
        readinessProbe:
          {{- toYaml $.Values.readinessProbe | nindent 10 }}
        resources: {{- toYaml $.Values.resources | nindent 12 }}
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        - name: persistence
          mountPath: /data
          subPath: {{ $.Values.persistence.chainBaseDir }}
        env:
        {{- range $k, $v := $.Values.env }}
        - name: {{ $k }}
          value: {{ tpl $v . | quote }}
        {{- end }}
        command:
        - /bin/bash
        - '-c'
        args:
        - >-
          {{- with $preRunScript }}{{ . | nindent 10 }}{{ end }}
          exec alt-verifier
          {{- $subCommand | nindent 10 }}
          {{- range $k, $v := $args }}
          {{- if $v }}
              {{- if eq (toString $v) "true" }}
          --{{ kebabcase $k }}
              {{- else if (kindIs "slice" $v)}}
                  {{- range $vi := $v}}
          --{{ kebabcase $k }}={{ tpl (toString $vi) $ | quote }}
                  {{- end }}
              {{- else }}
          --{{ kebabcase $k }}={{ tpl (toString $v) $ | quote }}
              {{- end }}
          {{- end }}
          {{- end }}
          --
          {{- range $k, $v := $producerArgs }}
          {{- if $v }}
              {{- if eq (toString $v) "true" }}
          --{{ kebabcase $k }}
              {{- else if (kindIs "slice" $v)}}
                  {{- range $vi := $v}}
          --{{ kebabcase $k }}={{ tpl (toString $vi) $ | quote }}
                  {{- end }}
              {{- else }}
          --{{ kebabcase $k }}={{ tpl (toString $v) $ | quote }}
              {{- end }}
          {{- end }}
          {{- end }}
      serviceAccountName: {{ include "alt-verifier.serviceAccountName" . }}
      {{- if $.Values.image.pullSecrets }}
      imagePullSecrets:
      {{- range $.Values.image.pullSecrets }}
      - name: {{ . | quote }}
      {{- end }}
      {{- end }}
      securityContext:
        {{- toYaml $.Values.podSecurityContext | nindent 8 }}
      {{- with $.Values.dnsConfig }}
      dnsConfig:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: scripts
        configMap:
          name: {{ include "alt-verifier.fullname" . }}-scripts
  {{- if not $.Values.persistence.enabled }}
      - name: persistence
        {{- with $.Values.persistence.emptyDir }}
        emptyDir:
          {{- toYaml . | nindent 10 }}
        {{- else }}
        emptyDir: {}
        {{- end }}
  {{- else if $.Values.persistence.existingClaim }}
      - name: persistence
        persistentVolumeClaim:
          claimName: {{ printf "%s" (tpl $.Values.persistence.existingClaim .) }}
  {{- else }}
  volumeClaimTemplates:
  - metadata:
      name: persistence
      labels:
        {{- include "alt-verifier.selectorLabels" . | nindent 8 }}
      {{- if $.Values.persistence.annotations }}
      annotations:
        {{- toYaml $.Values.persistence.annotations | nindent 8 }}
      {{- end }}
    spec:
      accessModes:
      {{- range $.Values.persistence.accessModes }}
      - {{ . | quote }}
      {{- end }}
      resources:
        requests:
          storage: {{ $.Values.persistence.size | quote }}
      {{- with $.Values.persistence.storageClassName }}
      storageClassName: {{ . | quote }}
      {{- end }}
  {{- end }}
